import fs from 'node:fs'
import { cp, mkdir, rm } from 'node:fs/promises'
import { dirname, resolve } from 'node:path'
import { fileURLToPath, pathToFileURL } from 'node:url'

import { extractTokenValue } from './process-tokens.js'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)
const packageRoot = resolve(__dirname, '..', '..')
const distRoot = resolve(packageRoot, 'dist')
const generatedDir = resolve(packageRoot, 'src/generated')
const fontsSourceDir = resolve(packageRoot, 'assets/fonts')
const fontsDistDir = resolve(distRoot, 'assets/fonts')

const lightTokensModule = await import(
  pathToFileURL(resolve(distRoot, 'jsts/light/variables.js')).href
)
const darkTokensModule = await import(
  pathToFileURL(resolve(distRoot, 'jsts/dark/variables.js')).href
)
const fontFacesModule = await import(
  pathToFileURL(resolve(distRoot, 'jsts/light/font-face.js')).href
)

const lightTokens = extractTokenValue(asRecord(lightTokensModule.default))
const darkTokens = extractTokenValue(asRecord(darkTokensModule.default))
const fontFaces = asRecord(fontFacesModule.default)

const light = {
  ...lightTokens,
  ...fontFaces
}

const dark = {
  ...darkTokens,
  ...fontFaces
}

await mkdir(generatedDir, { recursive: true })

const themesModulePath = resolve(generatedDir, 'themes.ts')

const fileHeader = `// Auto-generated by style dictionary post-build script.\n// Do not edit directly.\n`

const themesSource = `${fileHeader}
export const light = ${JSON.stringify(light, null, 2)} as const

export const dark = ${JSON.stringify(dark, null, 2)} as const

export const themes = { light, dark } as const

export type ThemeName = keyof typeof themes
`

fs.writeFileSync(themesModulePath, themesSource)

if (fs.existsSync(fontsSourceDir)) {
  await rm(fontsDistDir, { recursive: true, force: true })
  await mkdir(fontsDistDir, { recursive: true })
  await cp(fontsSourceDir, fontsDistDir, { recursive: true })
}

/**
 * @param {unknown} value
 * @returns {Record<string, unknown>}
 */
function asRecord(value) {
  if (value && typeof value === 'object') {
    return /** @type {Record<string, unknown>} */ (value)
  }

  return {}
}
